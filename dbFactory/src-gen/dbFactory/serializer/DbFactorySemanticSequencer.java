/*
 * generated by Xtext 2.12.0
 */
package dbFactory.serializer;

import com.google.inject.Inject;
import dbFactory.dbFactory.Attribute;
import dbFactory.dbFactory.AttributeType;
import dbFactory.dbFactory.Command;
import dbFactory.dbFactory.DbFactoryPackage;
import dbFactory.dbFactory.Model;
import dbFactory.dbFactory.ObjectType;
import dbFactory.dbFactory.StandartType;
import dbFactory.services.DbFactoryGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class DbFactorySemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private DbFactoryGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == DbFactoryPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case DbFactoryPackage.ATTRIBUTE:
				sequence_Attribute(context, (Attribute) semanticObject); 
				return; 
			case DbFactoryPackage.ATTRIBUTE_TYPE:
				sequence_AttributeType(context, (AttributeType) semanticObject); 
				return; 
			case DbFactoryPackage.COMMAND:
				sequence_Command(context, (Command) semanticObject); 
				return; 
			case DbFactoryPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case DbFactoryPackage.OBJECT:
				sequence_Object(context, (dbFactory.dbFactory.Object) semanticObject); 
				return; 
			case DbFactoryPackage.OBJECT_TYPE:
				sequence_ObjectType(context, (ObjectType) semanticObject); 
				return; 
			case DbFactoryPackage.STANDART_TYPE:
				sequence_StandartType(context, (StandartType) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     AttributeType returns AttributeType
	 *
	 * Constraint:
	 *     (elementType=ElementType (array?='[' length=INT)?)
	 */
	protected void sequence_AttributeType(ISerializationContext context, AttributeType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Attribute returns Attribute
	 *
	 * Constraint:
	 *     (name=ID type=AttributeType)
	 */
	protected void sequence_Attribute(ISerializationContext context, Attribute semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DbFactoryPackage.Literals.ATTRIBUTE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DbFactoryPackage.Literals.ATTRIBUTE__NAME));
			if (transientValues.isValueTransient(semanticObject, DbFactoryPackage.Literals.ATTRIBUTE__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DbFactoryPackage.Literals.ATTRIBUTE__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAttributeAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getAttributeAccess().getTypeAttributeTypeParserRuleCall_2_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Command returns Command
	 *
	 * Constraint:
	 *     obj=Object
	 */
	protected void sequence_Command(ISerializationContext context, Command semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DbFactoryPackage.Literals.COMMAND__OBJ) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DbFactoryPackage.Literals.COMMAND__OBJ));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCommandAccess().getObjObjectParserRuleCall_0(), semanticObject.getObj());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     command+=Command+
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ElementType returns ObjectType
	 *     ObjectType returns ObjectType
	 *
	 * Constraint:
	 *     typeObj=[Object|ID]
	 */
	protected void sequence_ObjectType(ISerializationContext context, ObjectType semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DbFactoryPackage.Literals.OBJECT_TYPE__TYPE_OBJ) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DbFactoryPackage.Literals.OBJECT_TYPE__TYPE_OBJ));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getObjectTypeAccess().getTypeObjObjectIDTerminalRuleCall_0_1(), semanticObject.eGet(DbFactoryPackage.Literals.OBJECT_TYPE__TYPE_OBJ, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Object returns Object
	 *
	 * Constraint:
	 *     (name=ID superType=[Object|ID]? attributes+=Attribute*)
	 */
	protected void sequence_Object(ISerializationContext context, dbFactory.dbFactory.Object semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ElementType returns StandartType
	 *     StandartType returns StandartType
	 *
	 * Constraint:
	 *     (typeName='Text' | typeName='text' | typeName='Zahl' | typeName='zahl')
	 */
	protected void sequence_StandartType(ISerializationContext context, StandartType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
