/*
 * generated by Xtext 2.12.0
 */
grammar InternalDbFactory;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package dbFactory.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package dbFactory.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import dbFactory.services.DbFactoryGrammarAccess;

}

@parser::members {

 	private DbFactoryGrammarAccess grammarAccess;

    public InternalDbFactoryParser(TokenStream input, DbFactoryGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected DbFactoryGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getCommandCommandParserRuleCall_0_0());
				}
				lv_command_0_0=ruleCommand
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"command",
						lv_command_0_0,
						"dbFactory.DbFactory.Command");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_1='.'
		{
			newLeafNode(otherlv_1, grammarAccess.getModelAccess().getFullStopKeyword_1());
		}
	)
;

// Entry rule entryRuleCommand
entryRuleCommand returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCommandRule()); }
	iv_ruleCommand=ruleCommand
	{ $current=$iv_ruleCommand.current; }
	EOF;

// Rule Command
ruleCommand returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getCommandAccess().getObjObjectParserRuleCall_0());
			}
			lv_obj_0_0=ruleObject
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getCommandRule());
				}
				set(
					$current,
					"obj",
					lv_obj_0_0,
					"dbFactory.DbFactory.Object");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleObject
entryRuleObject returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getObjectRule()); }
	iv_ruleObject=ruleObject
	{ $current=$iv_ruleObject.current; }
	EOF;

// Rule Object
ruleObject returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Objekt'
		{
			newLeafNode(otherlv_0, grammarAccess.getObjectAccess().getObjektKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getObjectAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getObjectRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"dbFactory.DbFactory.ID");
				}
			)
		)
		(
			otherlv_2='von'
			{
				newLeafNode(otherlv_2, grammarAccess.getObjectAccess().getVonKeyword_2_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getObjectRule());
						}
					}
					otherlv_3=RULE_ID
					{
						newLeafNode(otherlv_3, grammarAccess.getObjectAccess().getSuperTypeObjectCrossReference_2_1_0());
					}
				)
			)
		)?
		otherlv_4='{'
		{
			newLeafNode(otherlv_4, grammarAccess.getObjectAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getObjectAccess().getAttributesAttributeParserRuleCall_4_0());
				}
				lv_attributes_5_0=ruleAttribute
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getObjectRule());
					}
					add(
						$current,
						"attributes",
						lv_attributes_5_0,
						"dbFactory.DbFactory.Attribute");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getObjectAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleAttribute
entryRuleAttribute returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAttributeRule()); }
	iv_ruleAttribute=ruleAttribute
	{ $current=$iv_ruleAttribute.current; }
	EOF;

// Rule Attribute
ruleAttribute returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getAttributeAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAttributeRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"dbFactory.DbFactory.ID");
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getAttributeAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAttributeAccess().getTypeAttributeTypeParserRuleCall_2_0());
				}
				lv_type_2_0=ruleAttributeType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAttributeRule());
					}
					set(
						$current,
						"type",
						lv_type_2_0,
						"dbFactory.DbFactory.AttributeType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='.'
		{
			newLeafNode(otherlv_3, grammarAccess.getAttributeAccess().getFullStopKeyword_3());
		}
	)
;

// Entry rule entryRuleAttributeType
entryRuleAttributeType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAttributeTypeRule()); }
	iv_ruleAttributeType=ruleAttributeType
	{ $current=$iv_ruleAttributeType.current; }
	EOF;

// Rule AttributeType
ruleAttributeType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getAttributeTypeAccess().getElementTypeElementTypeParserRuleCall_0_0());
				}
				lv_elementType_0_0=ruleElementType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAttributeTypeRule());
					}
					set(
						$current,
						"elementType",
						lv_elementType_0_0,
						"dbFactory.DbFactory.ElementType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					lv_array_1_0='['
					{
						newLeafNode(lv_array_1_0, grammarAccess.getAttributeTypeAccess().getArrayLeftSquareBracketKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAttributeTypeRule());
						}
						setWithLastConsumed($current, "array", true, "[");
					}
				)
			)
			(
				(
					lv_length_2_0=RULE_INT
					{
						newLeafNode(lv_length_2_0, grammarAccess.getAttributeTypeAccess().getLengthINTTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAttributeTypeRule());
						}
						setWithLastConsumed(
							$current,
							"length",
							lv_length_2_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
			otherlv_3=']'
			{
				newLeafNode(otherlv_3, grammarAccess.getAttributeTypeAccess().getRightSquareBracketKeyword_1_2());
			}
		)?
	)
;

// Entry rule entryRuleElementType
entryRuleElementType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getElementTypeRule()); }
	iv_ruleElementType=ruleElementType
	{ $current=$iv_ruleElementType.current; }
	EOF;

// Rule ElementType
ruleElementType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getElementTypeAccess().getStandartTypeParserRuleCall_0());
		}
		this_StandartType_0=ruleStandartType
		{
			$current = $this_StandartType_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getElementTypeAccess().getObjectTypeParserRuleCall_1());
		}
		this_ObjectType_1=ruleObjectType
		{
			$current = $this_ObjectType_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleStandartType
entryRuleStandartType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStandartTypeRule()); }
	iv_ruleStandartType=ruleStandartType
	{ $current=$iv_ruleStandartType.current; }
	EOF;

// Rule StandartType
ruleStandartType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_typeName_0_1='Text'
				{
					newLeafNode(lv_typeName_0_1, grammarAccess.getStandartTypeAccess().getTypeNameTextKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getStandartTypeRule());
					}
					setWithLastConsumed($current, "typeName", lv_typeName_0_1, null);
				}
				    |
				lv_typeName_0_2='text'
				{
					newLeafNode(lv_typeName_0_2, grammarAccess.getStandartTypeAccess().getTypeNameTextKeyword_0_1());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getStandartTypeRule());
					}
					setWithLastConsumed($current, "typeName", lv_typeName_0_2, null);
				}
				    |
				lv_typeName_0_3='Zahl'
				{
					newLeafNode(lv_typeName_0_3, grammarAccess.getStandartTypeAccess().getTypeNameZahlKeyword_0_2());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getStandartTypeRule());
					}
					setWithLastConsumed($current, "typeName", lv_typeName_0_3, null);
				}
				    |
				lv_typeName_0_4='zahl'
				{
					newLeafNode(lv_typeName_0_4, grammarAccess.getStandartTypeAccess().getTypeNameZahlKeyword_0_3());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getStandartTypeRule());
					}
					setWithLastConsumed($current, "typeName", lv_typeName_0_4, null);
				}
			)
		)
	)
;

// Entry rule entryRuleObjectType
entryRuleObjectType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getObjectTypeRule()); }
	iv_ruleObjectType=ruleObjectType
	{ $current=$iv_ruleObjectType.current; }
	EOF;

// Rule ObjectType
ruleObjectType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getObjectTypeRule());
				}
			}
			otherlv_0=RULE_ID
			{
				newLeafNode(otherlv_0, grammarAccess.getObjectTypeAccess().getTypeObjObjectCrossReference_0());
			}
		)
	)
;

RULE_ID : ('A'..'Z'|'a'..'z'|'_'|'!') ('a'..'z'|'A'..'Z'|'_'|'0'..'9'|'!')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
