/**
 * generated by Xtext 2.12.0
 */
package dbFactory.dbFactory.impl;

import dbFactory.dbFactory.Attribute;
import dbFactory.dbFactory.AttributeType;
import dbFactory.dbFactory.Command;
import dbFactory.dbFactory.DbFactoryFactory;
import dbFactory.dbFactory.DbFactoryPackage;
import dbFactory.dbFactory.ElementType;
import dbFactory.dbFactory.Model;
import dbFactory.dbFactory.ObjectType;
import dbFactory.dbFactory.StandartType;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class DbFactoryFactoryImpl extends EFactoryImpl implements DbFactoryFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static DbFactoryFactory init()
  {
    try
    {
      DbFactoryFactory theDbFactoryFactory = (DbFactoryFactory)EPackage.Registry.INSTANCE.getEFactory(DbFactoryPackage.eNS_URI);
      if (theDbFactoryFactory != null)
      {
        return theDbFactoryFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new DbFactoryFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DbFactoryFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case DbFactoryPackage.MODEL: return createModel();
      case DbFactoryPackage.COMMAND: return createCommand();
      case DbFactoryPackage.OBJECT: return createObject();
      case DbFactoryPackage.ATTRIBUTE: return createAttribute();
      case DbFactoryPackage.ATTRIBUTE_TYPE: return createAttributeType();
      case DbFactoryPackage.ELEMENT_TYPE: return createElementType();
      case DbFactoryPackage.STANDART_TYPE: return createStandartType();
      case DbFactoryPackage.OBJECT_TYPE: return createObjectType();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Command createCommand()
  {
    CommandImpl command = new CommandImpl();
    return command;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public dbFactory.dbFactory.Object createObject()
  {
    ObjectImpl object = new ObjectImpl();
    return object;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Attribute createAttribute()
  {
    AttributeImpl attribute = new AttributeImpl();
    return attribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AttributeType createAttributeType()
  {
    AttributeTypeImpl attributeType = new AttributeTypeImpl();
    return attributeType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ElementType createElementType()
  {
    ElementTypeImpl elementType = new ElementTypeImpl();
    return elementType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StandartType createStandartType()
  {
    StandartTypeImpl standartType = new StandartTypeImpl();
    return standartType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ObjectType createObjectType()
  {
    ObjectTypeImpl objectType = new ObjectTypeImpl();
    return objectType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DbFactoryPackage getDbFactoryPackage()
  {
    return (DbFactoryPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static DbFactoryPackage getPackage()
  {
    return DbFactoryPackage.eINSTANCE;
  }

} //DbFactoryFactoryImpl
