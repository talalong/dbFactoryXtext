/**
 * generated by Xtext 2.12.0
 */
package dbFactory.dbFactory.impl;

import dbFactory.dbFactory.DbFactoryPackage;
import dbFactory.dbFactory.ObjectType;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Object Type</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link dbFactory.dbFactory.impl.ObjectTypeImpl#getTypeObj <em>Type Obj</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ObjectTypeImpl extends ElementTypeImpl implements ObjectType
{
  /**
   * The cached value of the '{@link #getTypeObj() <em>Type Obj</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTypeObj()
   * @generated
   * @ordered
   */
  protected dbFactory.dbFactory.Object typeObj;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ObjectTypeImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DbFactoryPackage.Literals.OBJECT_TYPE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public dbFactory.dbFactory.Object getTypeObj()
  {
    if (typeObj != null && typeObj.eIsProxy())
    {
      InternalEObject oldTypeObj = (InternalEObject)typeObj;
      typeObj = (dbFactory.dbFactory.Object)eResolveProxy(oldTypeObj);
      if (typeObj != oldTypeObj)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, DbFactoryPackage.OBJECT_TYPE__TYPE_OBJ, oldTypeObj, typeObj));
      }
    }
    return typeObj;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public dbFactory.dbFactory.Object basicGetTypeObj()
  {
    return typeObj;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTypeObj(dbFactory.dbFactory.Object newTypeObj)
  {
    dbFactory.dbFactory.Object oldTypeObj = typeObj;
    typeObj = newTypeObj;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DbFactoryPackage.OBJECT_TYPE__TYPE_OBJ, oldTypeObj, typeObj));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DbFactoryPackage.OBJECT_TYPE__TYPE_OBJ:
        if (resolve) return getTypeObj();
        return basicGetTypeObj();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DbFactoryPackage.OBJECT_TYPE__TYPE_OBJ:
        setTypeObj((dbFactory.dbFactory.Object)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DbFactoryPackage.OBJECT_TYPE__TYPE_OBJ:
        setTypeObj((dbFactory.dbFactory.Object)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DbFactoryPackage.OBJECT_TYPE__TYPE_OBJ:
        return typeObj != null;
    }
    return super.eIsSet(featureID);
  }

} //ObjectTypeImpl
