/*
 * generated by Xtext 2.12.0
 */
package dbFactory.ide.contentassist.antlr;

import com.google.inject.Inject;
import dbFactory.ide.contentassist.antlr.internal.InternalDbFactoryParser;
import dbFactory.services.DbFactoryGrammarAccess;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class DbFactoryParser extends AbstractContentAssistParser {

	@Inject
	private DbFactoryGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalDbFactoryParser createParser() {
		InternalDbFactoryParser result = new InternalDbFactoryParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getElementTypeAccess().getAlternatives(), "rule__ElementType__Alternatives");
					put(grammarAccess.getStandartTypeAccess().getTypeNameAlternatives_0(), "rule__StandartType__TypeNameAlternatives_0");
					put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
					put(grammarAccess.getObjectAccess().getGroup(), "rule__Object__Group__0");
					put(grammarAccess.getObjectAccess().getGroup_2(), "rule__Object__Group_2__0");
					put(grammarAccess.getAttributeAccess().getGroup(), "rule__Attribute__Group__0");
					put(grammarAccess.getAttributeTypeAccess().getGroup(), "rule__AttributeType__Group__0");
					put(grammarAccess.getAttributeTypeAccess().getGroup_1(), "rule__AttributeType__Group_1__0");
					put(grammarAccess.getModelAccess().getCommandAssignment_0(), "rule__Model__CommandAssignment_0");
					put(grammarAccess.getCommandAccess().getObjAssignment(), "rule__Command__ObjAssignment");
					put(grammarAccess.getObjectAccess().getNameAssignment_1(), "rule__Object__NameAssignment_1");
					put(grammarAccess.getObjectAccess().getSuperTypeAssignment_2_1(), "rule__Object__SuperTypeAssignment_2_1");
					put(grammarAccess.getObjectAccess().getAttributesAssignment_4(), "rule__Object__AttributesAssignment_4");
					put(grammarAccess.getAttributeAccess().getNameAssignment_0(), "rule__Attribute__NameAssignment_0");
					put(grammarAccess.getAttributeAccess().getTypeAssignment_2(), "rule__Attribute__TypeAssignment_2");
					put(grammarAccess.getAttributeTypeAccess().getElementTypeAssignment_0(), "rule__AttributeType__ElementTypeAssignment_0");
					put(grammarAccess.getAttributeTypeAccess().getArrayAssignment_1_0(), "rule__AttributeType__ArrayAssignment_1_0");
					put(grammarAccess.getAttributeTypeAccess().getLengthAssignment_1_1(), "rule__AttributeType__LengthAssignment_1_1");
					put(grammarAccess.getStandartTypeAccess().getTypeNameAssignment(), "rule__StandartType__TypeNameAssignment");
					put(grammarAccess.getObjectTypeAccess().getTypeObjAssignment(), "rule__ObjectType__TypeObjAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public DbFactoryGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(DbFactoryGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
